--- ../src_base/minecraft_server/net/minecraft/src/ChunkProviderGenerate.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft_server/net/minecraft/src/ChunkProviderGenerate.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,8 @@
 import java.util.List;
 import java.util.Random;
 
+import net.minecraft.src.TFC_Core.TFC_Core;
+
 public class ChunkProviderGenerate implements IChunkProvider
 {
     /** RNG. */
@@ -36,19 +38,19 @@
     /** Holds the overall noise array used in chunk generation */
     private double[] noiseArray;
     private double[] stoneNoise = new double[256];
-    private MapGenBase caveGenerator = new MapGenCaves();
+    private MapGenBase caveGenerator = new MapGenCavesTFC();
 
     /** Holds Stronghold Generator */
-    private MapGenStronghold strongholdGenerator = new MapGenStronghold();
+    private MapGenStrongholdTFC strongholdGenerator = new MapGenStrongholdTFC();
 
     /** Holds Village Generator */
-    private MapGenVillage villageGenerator = new MapGenVillage(0);
+    private MapGenVillageTFC villageGenerator = new MapGenVillageTFC(0);
 
     /** Holds Mineshaft Generator */
     private MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
 
     /** Holds ravine generator */
-    private MapGenBase ravineGenerator = new MapGenRavine();
+    private MapGenBase ravineGenerator = new MapGenRavineTFC();
 
     /** The biomes that are used to generate the chunk */
     private BiomeGenBase[] biomesForGeneration;
@@ -270,9 +272,11 @@
     {
         this.rand.setSeed((long)par1 * 341873128712L + (long)par2 * 132897987541L);
         byte[] var3 = new byte[32768];
+        byte[] meta = new byte[32768];
         this.generateTerrain(par1, par2, var3);
         this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, par1 * 16, par2 * 16, 16, 16);
-        this.replaceBlocksForBiome(par1, par2, var3, this.biomesForGeneration);
+        TFC_Core.replaceBlocksForBiome(par1, par2, var3, meta, this.biomesForGeneration,this.stoneNoise,this.noiseGen4, rand);
+        //this.replaceBlocksForBiome(par1, par2, var3, this.biomesForGeneration);
         this.caveGenerator.generate(this, this.worldObj, par1, par2, var3);
         this.ravineGenerator.generate(this, this.worldObj, par1, par2, var3);
 
@@ -283,13 +287,7 @@
             this.strongholdGenerator.generate(this, this.worldObj, par1, par2, var3);
         }
 
-        Chunk var4 = new Chunk(this.worldObj, var3, par1, par2);
-        byte[] var5 = var4.getBiomeArray();
-
-        for (int var6 = 0; var6 < var5.length; ++var6)
-        {
-            var5[var6] = (byte)this.biomesForGeneration[var6].biomeID;
-        }
+        Chunk var4 = new Chunk(this.worldObj, var3, meta, par1, par2);
 
         var4.generateSkylightMap();
         return var4;
